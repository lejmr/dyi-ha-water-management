
substitutions:
  devicename: water-tank-final-v2
  friendly_name: Water tank and well sensor (new)
  device_description:  Water tank and well sensor)

esphome:
  name: ${devicename}
  friendly_name: ${friendly_name}
  comment: ${device_description}

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  framework:
    type: arduino

wifi:
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
  

# Enable logging
logger: 
  level: VERBOSE
  baud_rate: 0

captive_portal:

api:

# restart 
button:
  - platform: restart
    name: Restart

# Konfigurovatelné parametry nádrží - plochy
number:
  - platform: template
    name: "Tank area"
    id: tank_area_config
    unit_of_measurement: "m²"
    min_value: 0.1
    max_value: 100.0
    step: 0.01
    initial_value: 6.56
    optimistic: true
    restore_value: true
    entity_category: config
    icon: "mdi:crop-square"

  - platform: template
    name: "Well area"
    id: well_area_config
    unit_of_measurement: "m²"
    min_value: 0.01
    max_value: 20.0
    step: 0.01
    initial_value: 0.78
    optimistic: true
    restore_value: true
    entity_category: config
    icon: "mdi:circle-outline"

sensor:
# Reports how long the device has been powered (in minutes)
  - platform: uptime
    name: Uptime
    filters:
      - lambda: return x / 60.0;
    unit_of_measurement: minutes

# water level sensor
# https://esphome.io/components/sensor/modbus_controller.html
  - platform: modbus_controller
    modbus_controller_id: mod_well
    name: "Well water level"
    id: modbus_well_water_level
    register_type: holding
    address: 0x0004
    unit_of_measurement: "cm"
    value_type: S_WORD
    icon: "mdi:arrow-expand-vertical"

  - platform: modbus_controller
    modbus_controller_id: mod_tank
    name: "Tank water level"
    id: modbus_tank_water_level
    register_type: holding
    address: 0x0004
    unit_of_measurement: "cm"
    value_type: S_WORD
    icon: "mdi:arrow-expand-vertical"

# Reports the WiFi signal strength
  - platform: wifi_signal
    name: Wifi Signal
    update_interval: 60s

# Výpočet objemu tanku (konfigurovatelná plocha)
  - platform: template
    name: "Tank water volume"
    id: tank_water_volume
    unit_of_measurement: "m³"
    device_class: water
    state_class: measurement
    accuracy_decimals: 3
    icon: "mdi:cube-outline"
    lambda: |-
      if (id(modbus_tank_water_level).has_state() && 
          id(tank_area_config).has_state()) {
        float level_cm = id(modbus_tank_water_level).state;
        if (level_cm >= 0) {
          float level_m = level_cm / 100.0;
          float tank_area_m2 = id(tank_area_config).state;
          return level_m * tank_area_m2;
        }
      }
      return {};
    update_interval: 5s

  # Výpočet objemu studny (konfigurovatelná plocha)
  - platform: template
    name: "Well water volume"
    id: well_water_volume
    unit_of_measurement: "m³"
    device_class: water
    state_class: measurement
    accuracy_decimals: 3
    icon: "mdi:cube-outline"
    lambda: |-
      if (id(modbus_well_water_level).has_state() && 
          id(well_area_config).has_state()) {
        float level_cm = id(modbus_well_water_level).state;
        if (level_cm >= 0) {
          float level_m = level_cm / 100.0;
          float well_area_m2 = id(well_area_config).state;
          return level_m * well_area_m2;
        }
      }
      return {};
    update_interval: 5s

  # Celkový objem vody
  - platform: template
    name: "Total water volume"
    id: total_water_volume
    unit_of_measurement: "m³"
    device_class: water
    state_class: measurement
    accuracy_decimals: 3
    lambda: |-
      float tank_vol = 0;
      float well_vol = 0;
      
      if (id(tank_water_volume).has_state()) {
        tank_vol = id(tank_water_volume).state;
      }
      if (id(well_water_volume).has_state()) {
        well_vol = id(well_water_volume).state;
      }
      
      return tank_vol + well_vol;
    update_interval: 5s

text_sensor:
  - platform: version
    name: ESPHome Version
  - platform: wifi_info
    ip_address: # exposes the IP Address when connected
      internal: true
      id: wifi_ip_addr
      name: "IP Address"

uart:
  - id: uart_well
    tx_pin: GPIO05
    rx_pin: GPIO04
    baud_rate: 9600
    data_bits: 8
    stop_bits: 1
    parity: NONE
    debug: 
  - id: uart_tank
    tx_pin: GPIO09
    rx_pin: GPIO08
    baud_rate: 9600
    data_bits: 8
    stop_bits: 1
    parity: NONE
    debug: 

modbus:
  - id: modbus_well
    uart_id: uart_well
    send_wait_time: 500ms
    flow_control_pin: GPIO06
  - id: modbus_tank
    uart_id: uart_tank
    send_wait_time: 500ms
    flow_control_pin: GPIO07

modbus_controller:
  - id: mod_well
    modbus_id: modbus_well
    setup_priority: -10
    update_interval: 5s
  - id: mod_tank
    modbus_id: modbus_tank
    setup_priority: -10
    update_interval: 5s

status_led:
  pin:
    number: GPIO21